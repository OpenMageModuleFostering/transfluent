<?php
/** @var Mage_Core_Block_Template $this */
$request = Mage::app()->getRequest();
$attribute_id = $request->getParam('attribute_id');
$attribute_model = Mage::getModel('eav/entity_attribute');
/** @var Mage_Eav_Model_Entity_Attribute $attribute_model */
$attribute = $attribute_model->load($attribute_id);
/** @var Mage_Eav_Model_Entity_Attribute $attribute */
if (!$attribute || !$attribute->getId()) {
    return;
}
if (!$attribute->getIsVisibleOnFront() && !$attribute->getData('is_user_defined')) {
    // Invisible system attributes (such as "Custom Design") are not translatable
    return;
}
?>
<div class="content-header">
    <h3 class="icon-head head-products">Translations</h3>
</div>
<?php
$stores = Mage::app()->getStores();
if (!$stores || count($stores) < 2) {
    ?>
    <div class="notification-global"
         style="margin-bottom: 20px;"><?php echo $this->__('Please configure at least two store views.') ?></div><?php
    return;
}
$helper = Mage::helper('transfluenttranslate/languages');
/** @var Transfluent_Translate_Helper_Languages $helper */
$possible_languages = array();
foreach ($stores AS $store) {
    /** @var Mage_Core_Model_Store $store */
    $possible_languages[] = $helper->GetStoreLocale($store->getCode());
}
if (empty($possible_languages)) {
    ?>
    <div class="notification-global"
         style="margin-bottom: 20px;"><?php echo $this->__('Please configure at least two store views with different locales.') ?></div><?php
    return;
}
$store_id = $this->getRequest()->getParam('store');
print '<div style="margin-bottom: 20px; display: none;" id="translate_attribute_form">';
print '<strong>Translate</strong><br>';
print '<label><input type="checkbox" name="translate_name" id="translate_name" value="1" checked="checked"> attribute name (e.g. Color -&gt; Farbe)</label><br>';
print '<label><input type="checkbox" name="translate_values" id="translate_values" value="1" checked="checked"> attribute options (e.g. Black -&gt; Schwarz etc.)</label><br>';
print '<strong>into</strong> ';
$stores_by_websites = array();
foreach ($stores AS $store) {
    /** @var Mage_Core_Model_Store $store */
    if (!isset($stores_by_websites[$store->getWebsiteId()])) {
        $stores_by_websites[$store->getWebsiteId()] = array();
    }
    $stores_by_websites[$store->getWebsiteId()][] = $store;
}
$current_website = null;
$current_store_frontend_name = null;
foreach ($stores_by_websites AS $website_id => $website_stores) {
    foreach ($website_stores AS $store) {
        /** @var Mage_Core_Model_Store $store */
        if (!$current_website || $current_website != $website_id) {
            $current_website = $website_id;
            print '<div style="margin-left: 1rem; padding-left: 1rem;">';
            print '<strong style="margin-left: -1rem;">' . $store->getWebsite()->getName() . ':</strong>';
        }
        if (!$current_store_frontend_name || $current_store_frontend_name != $store->getFrontendName()) {
            print '<br><strong style="margin-left: -0.5rem;"><em>' . $store->getFrontendName() . ':</em></strong><br>';
            $current_store_frontend_name = $store->getFrontendName();
        }
        $store_language = $helper->GetStoreLocale($store->getCode());
        print '<label><input type="checkbox" name="translate_to[]" value="' . $store->getId() . '"> ' . $store->getName() . ' (' . Mage::getStoreConfig('general/locale/code', $store->getId()) . '; ' . $helper->getLanguageNameByCode(Mage::getStoreConfig('general/locale/code', $store->getId()), true) . ')</label> ';
    }
    if (count($website_stores)) {
        print '</div>';
    }
}
print '<br> <strong>from</strong> ' . $helper->getSourceLanguageSelectHtmlForStores($stores) . ' <strong>using</strong> ' . $helper->getQualityHtml($store_id) . ' <button id="tf_translate_quote" title="Quote" type="button" class="scalable btn-translate" onclick="QuoteTranslation(this); return false;"><span><span><span>Get quote</span></span></span></button><br>';
print '<div id="tf_translate_form" style="padding: 10px;"></div>';
print '</div>';
print '<button id="translate_attribute_form_toggler" title="Show translation form" type="button" class="scalable btn-translate" onclick="$(this).hide(); $(\'translate_attribute_form\').show(); return false;" style="margin-bottom: 2rem;"><span><span><span>Show translation form</span></span></span></button>';
?>
<script type="text/javascript">
    function OrderTranslation(order_btn) {
        $(order_btn).disable();
        var stores = [];
        $$('#translate_attribute_form input[type="checkbox"][name="translate_to[]"]').each(function (item) {
            var value = $(item).getValue();
            if (!value) {
                return;
            }
            stores.push(value);
        });
        new Ajax.Request('<?php echo $this->getUrl('adminhtml/Adminhtml_Transfluentorder/attribute_order') ?>', {
            method: 'post',
            parameters: {
                'instructions': $('tf_translate_instructions_txt').getValue(),
                'from_store': $('translateto').getValue(),
                'stores[]': stores,
                'level': $('tf_translate_level').getValue(),
                'attribute_id': '<?=$request->getParam('attribute_id')?>',
                'translate_name': $('translate_name').getValue(),
                'translate_values': $('translate_values').getValue()
            },
            onSuccess: function (response) {
                ResetEstimation();
                var text = response.responseText;
                if (response.responseText.isJSON()) {
                    var response_obj = response.responseText.evalJSON();
                    text = response_obj.message;
                }
                $('tf_translate_form').update(text);
            },
            onError: function (response) {
                alert('Failed to place order. Please try again!');
            }
        });
    }
    function ResetEstimation() {
        $('translate_attribute_form').select('input').each(function (item) {
            item.enable();
        });
        $('translateto').enable();
        $('tf_translate_level').enable();
        $('tf_translate_quote').enable().show();
        $('tf_translate_form').update('');
    }
    function QuoteTranslation(quote_btn) {
        $(quote_btn).disable();
        $('translate_attribute_form').select('input').each(function (item) {
            item.disable();
        });
        var stores = [];
        $$('#translate_attribute_form input[type="checkbox"][name="translate_to[]"]').each(function (item) {
            var value = $(item).getValue();
            if (!value) {
                return;
            }
            stores.push(value);
        });
        new Ajax.Request('<?php echo $this->getUrl('adminhtml/Adminhtml_Transfluenttranslate/get_attribute_quote') ?>', {
            method: 'post',
            parameters: {
                'from_store': $('translateto').getValue(),
                'stores[]': stores,
                'level': $('tf_translate_level').getValue(),
                'attribute_id': '<?=$request->getParam('attribute_id')?>',
                'translate_name': $('translate_name').getValue(),
                'translate_values': $('translate_values').getValue()
            },
            onSuccess: function (response) {
                $('translateto').disable();
                $('tf_translate_level').disable();
                $('tf_translate_quote').hide();
                var text = response.responseText;
                if (response.responseText.isJSON()) {
                    var response_obj = response.responseText.evalJSON();
                    text = response_obj.message;
                }
                $('tf_translate_form').update(text);
            },
            onError: function () {
                alert('Failed to estimate costs. Please try again!');
            }
        });
    }
</script>
